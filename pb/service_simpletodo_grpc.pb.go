// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: service_simpletodo.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Simpletodo_CreateAccount_FullMethodName = "/pb.Simpletodo/CreateAccount"
	Simpletodo_LoginAccount_FullMethodName  = "/pb.Simpletodo/LoginAccount"
)

// SimpletodoClient is the client API for Simpletodo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimpletodoClient interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResult, error)
	LoginAccount(ctx context.Context, in *LoginAccountRequest, opts ...grpc.CallOption) (*LoginAccountResult, error)
}

type simpletodoClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpletodoClient(cc grpc.ClientConnInterface) SimpletodoClient {
	return &simpletodoClient{cc}
}

func (c *simpletodoClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResult, error) {
	out := new(CreateAccountResult)
	err := c.cc.Invoke(ctx, Simpletodo_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpletodoClient) LoginAccount(ctx context.Context, in *LoginAccountRequest, opts ...grpc.CallOption) (*LoginAccountResult, error) {
	out := new(LoginAccountResult)
	err := c.cc.Invoke(ctx, Simpletodo_LoginAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpletodoServer is the server API for Simpletodo service.
// All implementations must embed UnimplementedSimpletodoServer
// for forward compatibility
type SimpletodoServer interface {
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResult, error)
	LoginAccount(context.Context, *LoginAccountRequest) (*LoginAccountResult, error)
	mustEmbedUnimplementedSimpletodoServer()
}

// UnimplementedSimpletodoServer must be embedded to have forward compatible implementations.
type UnimplementedSimpletodoServer struct {
}

func (UnimplementedSimpletodoServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedSimpletodoServer) LoginAccount(context.Context, *LoginAccountRequest) (*LoginAccountResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAccount not implemented")
}
func (UnimplementedSimpletodoServer) mustEmbedUnimplementedSimpletodoServer() {}

// UnsafeSimpletodoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimpletodoServer will
// result in compilation errors.
type UnsafeSimpletodoServer interface {
	mustEmbedUnimplementedSimpletodoServer()
}

func RegisterSimpletodoServer(s grpc.ServiceRegistrar, srv SimpletodoServer) {
	s.RegisterService(&Simpletodo_ServiceDesc, srv)
}

func _Simpletodo_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpletodoServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Simpletodo_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpletodoServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simpletodo_LoginAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpletodoServer).LoginAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Simpletodo_LoginAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpletodoServer).LoginAccount(ctx, req.(*LoginAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Simpletodo_ServiceDesc is the grpc.ServiceDesc for Simpletodo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Simpletodo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Simpletodo",
	HandlerType: (*SimpletodoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _Simpletodo_CreateAccount_Handler,
		},
		{
			MethodName: "LoginAccount",
			Handler:    _Simpletodo_LoginAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_simpletodo.proto",
}
