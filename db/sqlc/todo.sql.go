// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: todo.sql

package db

import (
	"context"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todo (
    account_id,
    title,
    time,
    date,
    complete
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, account_id, title, time, date, complete
`

type CreateTodoParams struct {
	AccountID int64  `json:"account_id"`
	Title     string `json:"title"`
	Time      string `json:"time"`
	Date      string `json:"date"`
	Complete  string `json:"complete"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.AccountID,
		arg.Title,
		arg.Time,
		arg.Date,
		arg.Complete,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Title,
		&i.Time,
		&i.Date,
		&i.Complete,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todo
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT id, account_id, title, time, date, complete FROM todo
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Title,
		&i.Time,
		&i.Date,
		&i.Complete,
	)
	return i, err
}

const listTodo = `-- name: ListTodo :many
SELECT id, account_id, title, time, date, complete FROM todo
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTodoParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTodo(ctx context.Context, arg ListTodoParams) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodo, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Title,
			&i.Time,
			&i.Date,
			&i.Complete,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todo 
SET title = $2, time = $3, date = $4, complete = $5
WHERE id = $1
RETURNING id, account_id, title, time, date, complete
`

type UpdateTodoParams struct {
	ID       int64  `json:"id"`
	Title    string `json:"title"`
	Time     string `json:"time"`
	Date     string `json:"date"`
	Complete string `json:"complete"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodo,
		arg.ID,
		arg.Title,
		arg.Time,
		arg.Date,
		arg.Complete,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Title,
		&i.Time,
		&i.Date,
		&i.Complete,
	)
	return i, err
}
